{"version":3,"file":"react-intersection-observer.umd.js","sources":["../src/observe.ts","../src/InView.tsx","../src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_elements$get","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","callbacks","push","unobserve","splice","indexOf","length","size","disconnect","isPlainChildren","props","children","InView","_React$Component","_inheritsLoose","_this","call","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","_proto","prototype","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_this$props","render","_this$state","ref","_this$props2","as","_objectWithoutPropertiesLoose","_excluded","React","createElement","_extends","Component","useInView","_temp","_state$entry","_ref","_React$useState","useState","setRef","useRef","_React$useState2","current","useEffect","entryTarget","previousEntryTarget","result"],"mappings":"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"}